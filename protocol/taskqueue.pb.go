// Service definitions for the worker <-> task manager component.
//
// The task manager runs as a stateless facade over a storage implementation to
// provide this interface.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.0.0
// source: taskqueue.proto

package protocol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taskqueue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{0}
}

func (x *GetRequest) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

type Work struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated ID representing the Work. An opaque value.
	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload     []byte               `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	EnqueuedAt  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	LeasedUntil *timestamp.Timestamp `protobuf:"bytes,4,opt,name=leased_until,json=leasedUntil,proto3" json:"leased_until,omitempty"`
}

func (x *Work) Reset() {
	*x = Work{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taskqueue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Work) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Work) ProtoMessage() {}

func (x *Work) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Work.ProtoReflect.Descriptor instead.
func (*Work) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{1}
}

func (x *Work) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Work) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Work) GetEnqueuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *Work) GetLeasedUntil() *timestamp.Timestamp {
	if x != nil {
		return x.LeasedUntil
	}
	return nil
}

type RenewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LeaseUntil *timestamp.Timestamp `protobuf:"bytes,2,opt,name=lease_until,json=leaseUntil,proto3" json:"lease_until,omitempty"`
}

func (x *RenewRequest) Reset() {
	*x = RenewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taskqueue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewRequest) ProtoMessage() {}

func (x *RenewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewRequest.ProtoReflect.Descriptor instead.
func (*RenewRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{2}
}

func (x *RenewRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenewRequest) GetLeaseUntil() *timestamp.Timestamp {
	if x != nil {
		return x.LeaseUntil
	}
	return nil
}

type FinishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FinishRequest) Reset() {
	*x = FinishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taskqueue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishRequest) ProtoMessage() {}

func (x *FinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishRequest.ProtoReflect.Descriptor instead.
func (*FinishRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{3}
}

func (x *FinishRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FinishRequest) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

type NackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NackRequest) Reset() {
	*x = NackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_taskqueue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackRequest) ProtoMessage() {}

func (x *NackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_taskqueue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackRequest.ProtoReflect.Descriptor instead.
func (*NackRequest) Descriptor() ([]byte, []int) {
	return file_taskqueue_proto_rawDescGZIP(), []int{4}
}

func (x *NackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_taskqueue_proto protoreflect.FileDescriptor

var file_taskqueue_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x70, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x5b, 0x0a, 0x0c, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x22, 0x37, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a,
	0x0b, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xc9, 0x02, 0x0a,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6b, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4b, 0x0a, 0x05, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x28, 0x2e, 0x6b, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x29, 0x2e, 0x6b, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x04, 0x4e, 0x61, 0x63, 0x6b, 0x12, 0x27, 0x2e, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4e, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x61, 0x6e, 0x6b, 0x61, 0x6e, 0x64, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x2d, 0x70, 0x6f, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_taskqueue_proto_rawDescOnce sync.Once
	file_taskqueue_proto_rawDescData = file_taskqueue_proto_rawDesc
)

func file_taskqueue_proto_rawDescGZIP() []byte {
	file_taskqueue_proto_rawDescOnce.Do(func() {
		file_taskqueue_proto_rawDescData = protoimpl.X.CompressGZIP(file_taskqueue_proto_rawDescData)
	})
	return file_taskqueue_proto_rawDescData
}

var file_taskqueue_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_taskqueue_proto_goTypes = []interface{}{
	(*GetRequest)(nil),          // 0: knative_async_poc.protocol.GetRequest
	(*Work)(nil),                // 1: knative_async_poc.protocol.Work
	(*RenewRequest)(nil),        // 2: knative_async_poc.protocol.RenewRequest
	(*FinishRequest)(nil),       // 3: knative_async_poc.protocol.FinishRequest
	(*NackRequest)(nil),         // 4: knative_async_poc.protocol.NackRequest
	(*timestamp.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*empty.Empty)(nil),         // 6: google.protobuf.Empty
}
var file_taskqueue_proto_depIdxs = []int32{
	5, // 0: knative_async_poc.protocol.Work.enqueued_at:type_name -> google.protobuf.Timestamp
	5, // 1: knative_async_poc.protocol.Work.leased_until:type_name -> google.protobuf.Timestamp
	5, // 2: knative_async_poc.protocol.RenewRequest.lease_until:type_name -> google.protobuf.Timestamp
	0, // 3: knative_async_poc.protocol.TaskManager.Get:input_type -> knative_async_poc.protocol.GetRequest
	2, // 4: knative_async_poc.protocol.TaskManager.Renew:input_type -> knative_async_poc.protocol.RenewRequest
	3, // 5: knative_async_poc.protocol.TaskManager.Finish:input_type -> knative_async_poc.protocol.FinishRequest
	4, // 6: knative_async_poc.protocol.TaskManager.Nack:input_type -> knative_async_poc.protocol.NackRequest
	1, // 7: knative_async_poc.protocol.TaskManager.Get:output_type -> knative_async_poc.protocol.Work
	6, // 8: knative_async_poc.protocol.TaskManager.Renew:output_type -> google.protobuf.Empty
	6, // 9: knative_async_poc.protocol.TaskManager.Finish:output_type -> google.protobuf.Empty
	6, // 10: knative_async_poc.protocol.TaskManager.Nack:output_type -> google.protobuf.Empty
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_taskqueue_proto_init() }
func file_taskqueue_proto_init() {
	if File_taskqueue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_taskqueue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taskqueue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Work); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taskqueue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taskqueue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_taskqueue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_taskqueue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_taskqueue_proto_goTypes,
		DependencyIndexes: file_taskqueue_proto_depIdxs,
		MessageInfos:      file_taskqueue_proto_msgTypes,
	}.Build()
	File_taskqueue_proto = out.File
	file_taskqueue_proto_rawDesc = nil
	file_taskqueue_proto_goTypes = nil
	file_taskqueue_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskManagerClient is the client API for TaskManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskManagerClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (TaskManager_GetClient, error)
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type taskManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskManagerClient(cc grpc.ClientConnInterface) TaskManagerClient {
	return &taskManagerClient{cc}
}

func (c *taskManagerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (TaskManager_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TaskManager_serviceDesc.Streams[0], "/knative_async_poc.protocol.TaskManager/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskManagerGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskManager_GetClient interface {
	Recv() (*Work, error)
	grpc.ClientStream
}

type taskManagerGetClient struct {
	grpc.ClientStream
}

func (x *taskManagerGetClient) Recv() (*Work, error) {
	m := new(Work)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskManagerClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/knative_async_poc.protocol.TaskManager/Renew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/knative_async_poc.protocol.TaskManager/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskManagerClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/knative_async_poc.protocol.TaskManager/Nack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskManagerServer is the server API for TaskManager service.
type TaskManagerServer interface {
	Get(*GetRequest, TaskManager_GetServer) error
	Renew(context.Context, *RenewRequest) (*empty.Empty, error)
	Finish(context.Context, *FinishRequest) (*empty.Empty, error)
	Nack(context.Context, *NackRequest) (*empty.Empty, error)
}

// UnimplementedTaskManagerServer can be embedded to have forward compatible implementations.
type UnimplementedTaskManagerServer struct {
}

func (*UnimplementedTaskManagerServer) Get(*GetRequest, TaskManager_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTaskManagerServer) Renew(context.Context, *RenewRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renew not implemented")
}
func (*UnimplementedTaskManagerServer) Finish(context.Context, *FinishRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (*UnimplementedTaskManagerServer) Nack(context.Context, *NackRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}

func RegisterTaskManagerServer(s *grpc.Server, srv TaskManagerServer) {
	s.RegisterService(&_TaskManager_serviceDesc, srv)
}

func _TaskManager_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskManagerServer).Get(m, &taskManagerGetServer{stream})
}

type TaskManager_GetServer interface {
	Send(*Work) error
	grpc.ServerStream
}

type taskManagerGetServer struct {
	grpc.ServerStream
}

func (x *taskManagerGetServer) Send(m *Work) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskManager_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knative_async_poc.protocol.TaskManager/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knative_async_poc.protocol.TaskManager/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Finish(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskManager_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskManagerServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/knative_async_poc.protocol.TaskManager/Nack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskManagerServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "knative_async_poc.protocol.TaskManager",
	HandlerType: (*TaskManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Renew",
			Handler:    _TaskManager_Renew_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _TaskManager_Finish_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _TaskManager_Nack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _TaskManager_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "taskqueue.proto",
}
