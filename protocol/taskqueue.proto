// Service definitions for the worker <-> task manager component.
//
// The task manager runs as a stateless facade over a storage implementation to
// provide this interface.

syntax = "proto3";
package knative_async_poc.protocol;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/evankanderson/knative-async-poc/protocol";

// The service for managing tasks from the worker side.
service TaskManager {
    rpc Get(GetRequest) returns (stream Work) {}

    rpc Renew(RenewRequest) returns (google.protobuf.Empty) {}

    rpc Finish(FinishRequest) returns (google.protobuf.Empty) {}

    rpc Nack(NackRequest) returns (google.protobuf.Empty) {}
}

message GetRequest {
   string queue_name = 1;
}

message Work {
    // Generated ID representing the Work. An opaque value.
    string id = 1;

    bytes payload = 2;

    google.protobuf.Timestamp enqueued_at = 3;

    google.protobuf.Timestamp leased_until = 4;
}

message RenewRequest {
    string id = 1;
    google.protobuf.Timestamp lease_until = 2;

    // TODO: support updating other properties?
}

message FinishRequest {
    string id = 1;

    bytes result = 2;
}

message NackRequest {
    string id = 1;
}